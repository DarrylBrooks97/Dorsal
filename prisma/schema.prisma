generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tanks         Tank[]
  userPlants    UserPlant[]
  userFish      UserFish[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Fish {
  id            String    @id @default(cuid())
  friend_id     String?   @default(cuid())
  name          String    @db.VarChar(255)
  image_url     String    @db.VarChar(255)
  habitat       String    @db.VarChar(255)
  species       String    @db.VarChar(255)
  max_size      Int       @db.Int
  temperament   String    @db.VarChar(255)
  min_tank_size Int       @db.Int
  diet          String    @db.VarChar(255)
  water_params  Json
  illnesses     String    @db.VarChar(255)
  maintained_at DateTime? @db.Timestamp(0)
  friends       Fish[]    @relation("Friends")

  fish_id  Fish?      @relation("Friends", fields: [friend_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserFish UserFish[]
}

model Plant {
  id            String      @id @default(cuid())
  name          String      @db.VarChar(255)
  image_url     String      @db.VarChar(255)
  species       String      @db.VarChar(255)
  lighting      String      @db.VarChar(255)
  soil          String      @db.VarChar(255)
  water_params  Json
  illnesses     String      @db.VarChar(255)
  maintained_at DateTime?   @db.Timestamp(0)
  UserPlant     UserPlant[]
}

model UserFish {
  id          String    @id @default(cuid())
  user_id     String    @default(cuid())
  tank_id     String    @default(cuid())
  fish_id     String    @default(cuid())
  name        String    @db.VarChar(255)
  next_update DateTime? @db.Timestamp(0)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tank        Tank      @relation(fields: [tank_id], references: [id], onDelete: Cascade)
  fish        Fish      @relation(fields: [fish_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model UserPlant {
  id          String    @id @default(cuid())
  user_id     String    @default(cuid())
  tank_id     String    @default(cuid())
  plant_id    String    @default(cuid())
  name        String    @db.VarChar(255)
  next_update DateTime? @db.Timestamp(0)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tank        Tank      @relation(fields: [tank_id], references: [id], onDelete: Cascade)
  plant       Plant     @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Tank {
  id            String      @id @default(cuid())
  user_id       String?     @default(cuid())
  user          User?       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type          String      @db.VarChar(255)
  name          String      @db.VarChar(255)
  image         String      @db.MediumText
  pH            Decimal?    @db.Decimal(10, 0)
  ammonia       Decimal?    @db.Decimal(10, 0)
  alkalinity    Decimal?    @db.Decimal(10, 0)
  chlorine      Decimal?    @db.Decimal(10, 0)
  nirate        Decimal?    @db.Decimal(10, 0)
  nirite        Decimal?    @db.Decimal(10, 0)
  hardness      Decimal?    @db.Decimal(10, 0)
  maintained_at DateTime?   @db.Timestamp(0)
  created_at    DateTime    @db.Timestamp(0)
  updated_at    DateTime    @db.Timestamp(0)
  Fish          UserFish[]
  Plant         UserPlant[]
}
